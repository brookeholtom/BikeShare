28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
x <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25,
24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00,
28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
x <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
plot(x)
library(ggplot2)
ggplot(x)
x <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
plot(x)
library(ggplot2)
ggplot(x, aes(x=rating))
x <- as.data.frame(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
ggplot(x, aes(x=rating))
ggplot(x)
ggplot(x, aes(x=x))
a <- as.data.frame(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
ggplot(a, aes(x=a))
a <- scan(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
a <- as.data.fram(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
a <- as.data.frame(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
a <- as.data.frame(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
plot(x)
a <- as.data.frame(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
a <- as.data.frame(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
a <- as.data.frame(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
View(a)
a <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
scan(24.00 28.00 27.75 27.00 24.25 23.50 26.25
24.00 25.00 30.00 23.25 26.25 21.50 26.00
28.00 24.50 22.50 28.25 21.25 19.75)
scan()
24.00 28.00 27.75 27.00 24.25 23.50 26.25
24.00 25.00 30.00 23.25 26.25 21.50 26.00
28.00 24.50 22.50 28.25 21.25 19.75
a <- scan() 24.00 28.00 27.75 27.00 24.25 23.50 26.25 24.00 25.00 30.00 23.25 26.25 21.50 26.00 28.00 24.50 22.50 28.25 21.25 19.75
a <- scan()
plot(a)
a <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
a
# Basic density plot with mean line and marginal rug
ggdensity(a,
fill = "#0073C2FF", color = "#0073C2FF",
add = "mean", rug = TRUE)
library(ggpubr)
install.packages("ggubr")
library(ggpubr)
library(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
# Basic density plot with mean line and marginal rug
ggdensity(a,
fill = "#0073C2FF", color = "#0073C2FF",
add = "mean", rug = TRUE)
library(ggpubr)
# Basic density plot with mean line and marginal rug
ggdensity(a,
fill = "#0073C2FF", color = "#0073C2FF",
add = "mean", rug = TRUE)
a <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
qqplot(a)
qqPlot(a)
library(car)
qqPlot(a)
sd(a)
mean(a)
sqrt(20)
mean(a) + 0.95*sd(a)/sqrt(20)
se = sd(a)/sqrt(20)
qt <- qt(0.025, 19, lower.tail=FALSE)
qt *se
mean(a) + qt*se
mean(a)-qt*se
qt(0.05, 10, lower.tail=FALSE)
qt *se
mean(a) + qt*se
mean(a)-qt*se
qt(0.05, 10, lower.tail=FALSE)
qt(0.05, 10, lower.tail=FALSE)
qt(0.05, 10, lower.tail=TRUE)
qt(0.05, 10, lower.tail=TRUE)
qt(0.95, 10, lower.tail=TRUE)
qt(0.95, 15, lower.tail=TRUE)
0.79/sqrt(14)
qt(0.05, 13, lower.tail=FALSE)
qt(0.05, 13, lower.tail=FALSE)
qt(0.05, 13, lower.tail=FALSE) *0.79/sqrt(14)
qt(0.05, 13, lower.tail=FALSE) *0.79/sqrt(14) +8.48
c <- c(25.2, 21.3, 22.8, 17.0, 29.8, 21.0, 25.5, 16.0, 20.9, 19.5)
mean(c)
sd(c)
sd(c)/sqrt(10)
me <- sd(c)/sqrt(10)
qt(0.99, 9, lower.tail=FALSE)
qt(0.01, 9, lower.tail=FALSE)
qt(0.01, 9, lower.tail=TRUE)
qt(0.01, 9, lower.tail=TRUE)
qt(0.01, 9, lower.tail=TRUE)
qt(0.01, 9, lower.tail=TRUE) *me
mean(c) + qt(0.01, 9, lower.tail=TRUE) *me
mean(c)
mean(c)
mean(c) + qt(0.01, 9, lower.tail=FALSE) *me
mean(c) + qt(0.01, 9, lower.tail=FALSE) *me
mean(c) - qt(0.01, 9, lower.tail=FALSE) *me
mean(c) - qt(0.01, 9, lower.tail=TRUE) *me
mean(c) - qt(0.01, 9, lower.tail=TRUE) *me
mean(c) + qt(0.01, 9, lower.tail=TRUE) *me
qt(0.05, 13, lower.tail=TRUE) *0.79/sqrt(14) +8.48
qt(0.95, 13, lower.tail=TRUE) *0.79/sqrt(14) +8.48
qt(0.05, 13, lower.tail=TRUE) *0.79/sqrt(14) +8.48
-qt(0.05, 13, lower.tail=FALSE) *0.79/sqrt(14) +8.48
-qt(0.05, 13, lower.tail=FALSE) *0.79/sqrt(14) +8.48
c <- c(25.2, 21.3, 22.8, 17.0, 29.8, 21.0, 25.5, 16.0, 20.9, 19.5)
mean(c)
sd(c)
me <- sd(c)/sqrt(10)
mean(c) + qt(0.01, 9, lower.tail=FALSE) *me
mean(c) + qt(0.01, 9, lower.tail=FALSE) *me
mean(c)
mean(c) + qt(0.01, 9, lower.tail=TRUE) *me
mean(c) + qt(0.01, 9, lower.tail=TRUE) *me
mean(c) - qt(0.01, 9, lower.tail=TRUE) *me
mean(c)
c <- c(25.2, 21.3, 22.8, 17.0, 29.8, 21.0, 25.5, 16.0, 20.9, 19.5)
mean(c)
sd(c)
me <- sd(c)/sqrt(10)
mean(c) + qt(0.05, 9, lower.tail=FALSE) *me
mean(c) + qt(0.05, 9, lower.tail=FALSE) *me
mean(c) + qt(0.95, 9, lower.tail=FALSE) *me
mean(c)
sd(c)
me <- sd(c)/sqrt(10)
qt(0.05, 9, lower.tail = FALSE)
qt(0.05, 9, lower.tail = FALSE) * me
mean(c)
sd*1.1
sd(c)*1.1
sd(c)*1.1* qt(0.05, 9, lower.tail=FALSE)
sd(c)*1.1* qt(0.05, 9, lower.tail=FALSE) + mean(c)
-sd(c)*1.1* qt(0.05, 9, lower.tail=FALSE) + mean(c)
0.99^2
qt(0.99, 2, lower.tail=FALSE)
qt(0.99, 2, lower.tail=FALSE)
qt(0.99, 2, lower.tail=TRUE)
qt(0.99, 2, lower.tail=TRUE)
qchisq(0.99, 2)
pchisq(1, 3)
a <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
library(car)
qqPlot(a)
sd(a)
se = sd(a)/sqrt(20)
mean(a)
qt(0.95, 19, lower.tail=FALSE)
qt(0.95, 19, lower.tail=FALSE)
qt(0.975, 19, lower.tail=FALSE)
qt(0.975, 19, lower.tail=FALSE) *se
qt(0.975, 19, lower.tail=FALSE) *sd(a)
sd(a) + qt(0.975, 19, lower.tail=FALSE) *sd(a)
sd(a) + qt(0.975, 19, lower.tail=FALSE) *sd(a)/sqrt(19)
sd(a)
sd(a) + qt(0.975, 19, lower.tail=FALSE) *sd(a)/sqrt(19)
sd(a) + qt(0.025, 19, lower.tail=FALSE) *sd(a)/sqrt(19)
sd(a) + qt(0.025, 19, lower.tail=FALSE) *sd(a)/sqrt(19)
sd(a) - qt(0.025, 19, lower.tail=FALSE) *sd(a)/sqrt(19)
sd(a)
qchisq(1, 2)
pchisq(1, 2)
qt(0.05, 7, lower.tail=FALSE)
pt(-2.3, 17, lower.tail=TRUE)
pt(-2.3, 17, lower.tail=FALSE)
pt(-2.3, 17, lower.tail=TRUE)
pt(-1.8, 17, lower.tail=TRUE)
pt(-3.6, 17, lower.tail=TRUE)
x <- c(0.53, 0.65, 0.46, 0.50, 0.37)
mean(x)
sd(x)
t.test(x)
t.test(x, 0.6)
t.test(x)
t.test(x, alternative=("one.sided", "greater"), mu=0.6, conf.level=0.95)
t.test(x, alternative=c("one.sided", "greater"), mu=0.6, conf.level=0.95)
t.test(x, alternative=("less"), mu=0.6, conf.level=0.95)
t.test(2.481, mu=3, conf.level=0.9)
x <- c(1.10, 5.09, 0.97, 1.59, 4.60, 0.32, 0.55, 1.45,
0.14, 4.47, 1.20, 3.50, 5.02, 4.67, 5.22, 2.69,
3.98, 3.17, 3.03, 2.21, 0.69, 4.47, 3.31, 1.17,
0.76, 1.17, 1.57, 2.62, 1.66, 2.05)
t.test(x, mu=3, conf.level=0.9)
t.test(x, mu=2.481, conf.level=0.95, var.equal=FALSE)
t.test(x, mu=3, conf.level=0.9)
pt(20.91, 29, lower.tail=FALSE)
pchisq(33.659, 29, lower.tail=FALSE)
pchisq(33.659, 29, lower.tail=TRUE)
pchisq(33.659, 29, lower.tail=FALSE)
library(tidyverse)
library(tidyverse)
bodyfat <- read_delim("BodyFat.txt", delim= " ")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages('tidyr')
install.packages("tidyr")
library(tidyverse)
library(tidyverse)
install.packages(c("tidyverse", "tibble", "tidyr"))
install.packages(c("tidyverse", "tibble", "tidyr"))
install.packages(c("tidyverse", "tibble", "tidyr"))
install.packages(c("tidyverse", "tibble", "tidyr"))
install.packages(c("tidyverse", "tibble", "tidyr"))
library(tidyverse)
install.packages('cli')
install.packages("cli")
install.packages("cli")
library(tidyverse)
library(tidyr)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages(c("askpass", "bit", "blob", "broom", "bslib", "cachem", "callr", "car", "cli", "colorspace", "cpp11", "crayon", "credentials", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dslabs", "dtplyr", "evaluate", "fansi", "fastmap", "flexmix", "fs", "gargle", "gert", "ggfortify", "ggplot2", "gh", "gitcreds", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labeling", "Lahman", "later", "leaflet", "leaflet.providers", "lme4", "maps", "maptools", "markdown", "Matrix", "minqa", "openssl", "pbkrtest", "pillar", "pkgload", "pls", "png", "pROC", "processx", "promises", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readxl", "rematch", "reticulate", "rlang", "rmarkdown", "RSQLite", "rstudioapi", "sass", "sp", "stringi", "sys", "terra", "testthat", "tinytex", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "whisker", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("askpass", "bit", "blob", "broom", "bslib", "cachem", "callr", "car", "cli", "colorspace", "cpp11", "crayon", "credentials", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dslabs", "dtplyr", "evaluate", "fansi", "fastmap", "flexmix", "fs", "gargle", "gert", "ggfortify", "ggplot2", "gh", "gitcreds", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labeling", "Lahman", "later", "leaflet", "leaflet.providers", "lme4", "maps", "maptools", "markdown", "Matrix", "minqa", "openssl", "pbkrtest", "pillar", "pkgload", "pls", "png", "pROC", "processx", "promises", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readxl", "rematch", "reticulate", "rlang", "rmarkdown", "RSQLite", "rstudioapi", "sass", "sp", "stringi", "sys", "terra", "testthat", "tinytex", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "whisker", "xfun", "XML", "xml2", "yaml", "zip"))
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
## and now re-install install packages using install.packages()
install.packages(packs$Package)
my_recipe <- recipe(count ~ ., data=bike)
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
install.packages(c("askpass", "cachem", "clock", "curl", "digest", "dplyr", "fs", "gert", "glmnet", "haven", "htmltools", "httpuv", "igraph", "jsonlite", "knitr", "later", "lme4", "maptools", "Matrix", "minqa", "openssl", "pROC", "processx", "prodlim", "promises", "purrr", "quantreg", "raster", "Rcpp", "readxl", "reticulate", "rlang", "sass", "sp", "sys", "terra", "testthat", "tzdb", "uuid", "vctrs", "vroom", "xfun", "xml2", "yardstick"))
install.packages("tidymodels")
library(tidymodels)
install.packages(rlang)
rlanh
rlang
install.packages("rlang")
install.packages("tidymodels")
library(tidymodels)
install.packages("rlang")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages('rlang')
install.packages('rlang')
install.packages("tidymodels")
library(rlang)
install.packages("rlang")
library(tidyverse) #importing needed packages
library(tidymodels)
library(vroom)
bike <- vroom("train.csv") #importing the data via vroom
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
setwd("C:/Users/brook/Downloads/STAT348/BikeShare")
library(tidyverse) #importing needed packages
library(tidymodels)
library(vroom)
bike <- vroom("train.csv") #importing the data via vroom
bike_test <-  vroom("test.csv") #importing test data
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
#feature engineering section via recipe:
my_recipe <- recipe(count ~ ., data=bike) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>% #modifying season column from numbers to a factor
step_num2factor(weather, levels=c("clear", "mist", "rain/snow")) %>% #modifying weather from numbers into factors
step_bin2factor(holiday) %>% #modifying holiday to factor from numbers
step_bin2factor(workingday) %>%
step_rm(datetime)#modifying working day to factor from numbers
#updating table to reflect above changes, will be saved with original name "bike"
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=bike)
#creating a model
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=bike_test)
bike_predictions[bike_predictions<0] <- 0 #making all negative columns 0
rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
bike_predictions
rename(bike_predictions, count = .pred)
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_3.csv")
library(tidyverse) #importing needed packages
library(tidymodels)
library(vroom)
bike <- vroom("train.csv") #importing the data via vroom
bike_test <-  vroom("test.csv") #importing test data
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
#feature engineering section via recipe:
my_recipe <- recipe(count ~ ., data=bike) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>% #modifying season column from numbers to a factor
step_num2factor(weather, levels=c("clear", "mist", "rain/snow")) %>% #modifying weather from numbers into factors
step_bin2factor(holiday) %>% #modifying holiday to factor from numbers
step_bin2factor(workingday) %>%
step_rm(datetime)#modifying working day to factor from numbers
#updating table to reflect above changes, will be saved with original name "bike"
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=bike)
#creating a model
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=bike_test)
bike_predictions[bike_predictions<0] <- 0 #making all negative columns 0
rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_3.csv")
rename(bike_predictions, count = .pred)
bike_predictions <- rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
bike_predictions
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_3.csv")
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_3.csv", delim=",")
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_3.csv", delim=",")
bike_predictions <- rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
library(tidyverse) #importing needed packages
library(tidymodels)
library(vroom)
bike <- vroom("train.csv") #importing the data via vroom
bike_test <-  vroom("test.csv") #importing test data
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
#feature engineering section via recipe:
my_recipe <- recipe(count ~ ., data=bike) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>% #modifying season column from numbers to a factor
step_num2factor(weather, levels=c("clear", "mist", "rain/snow")) %>% #modifying weather from numbers into factors
step_bin2factor(holiday) %>% #modifying holiday to factor from numbers
step_bin2factor(workingday) %>%
step_rm(datetime)#modifying working day to factor from numbers
#updating table to reflect above changes, will be saved with original name "bike"
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=bike)
#creating a model
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=bike_test)
bike_predictions[bike_predictions<0] <- 0 #making all negative columns 0
bike_predictions <- rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_3.csv", delim=",")
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_4.csv", delim=",")
bike_predictions$datetime <- bike_test$datetime
bike_predictions
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike <- vroom("train.csv") #importing the data via vroom
bike_test <-  vroom("test.csv") #importing test data
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
#feature engineering section via recipe:
my_recipe <- recipe(count ~ ., data=bike) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>% #modifying season column from numbers to a factor
step_num2factor(weather, levels=c("clear", "mist", "rain/snow")) %>% #modifying weather from numbers into factors
step_bin2factor(holiday) %>% #modifying holiday to factor from numbers
step_bin2factor(workingday) %>%
step_rm(datetime)#modifying working day to factor from numbers
#updating table to reflect above changes, will be saved with original name "bike"
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=bike)
#creating a model
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=bike_test)
bike_predictions[bike_predictions<0] <- 0 #making all negative columns 0
bike_predictions <- rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
format(bike_predictions$datetime)
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions_4.csv", delim=",")
#out_file <- tempfile(fileext = "csv")
vroom_write(bike_predictions, "bike_predictions.csv", delim=",")
format(bike_predictions$datetime)
bike_predictions <-format(bike_predictions$datetime)
vroom_write(bike_predictions, "bike_predictions.csv", delim=",")
bike_predictions <-format(bike_predictions$datetime)
bike_predictions <-format(bike_predictions$datetime)
library(tidyverse) #importing needed packages
library(tidymodels)
library(vroom)
bike <- vroom("train.csv") #importing the data via vroom
bike_test <-  vroom("test.csv") #importing test data
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
#feature engineering section via recipe:
my_recipe <- recipe(count ~ ., data=bike) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>% #modifying season column from numbers to a factor
step_num2factor(weather, levels=c("clear", "mist", "rain/snow")) %>% #modifying weather from numbers into factors
step_bin2factor(holiday) %>% #modifying holiday to factor from numbers
step_bin2factor(workingday) %>%
step_rm(datetime)#modifying working day to factor from numbers
#updating table to reflect above changes, will be saved with original name "bike"
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=bike)
#creating a model
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=bike_test)
bike_predictions[bike_predictions<0] <- 0 #making all negative columns 0
bike_predictions <- rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
bike_predictions <-format(bike_predictions$datetime)
vroom_write(bike_predictions, "bike_predictions.csv", delim=",")
bike_predictions$datetime <-format(bike_predictions$datetime)
bike_predictions$datetime <- bike_test$datetime
bike_predictions$datetime <-format(bike_predictions$datetime)
vroom_write(bike_predictions, "bike_predictions.csv", delim=",")
library(tidyverse) #importing needed packages
library(tidymodels)
library(vroom)
bike <- vroom("train.csv") #importing the data via vroom
bike_test <-  vroom("test.csv") #importing test data
#cleaning section: changing the single "4" weather day to "3"
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
#feature engineering section via recipe:
my_recipe <- recipe(count ~ ., data=bike) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>% #modifying season column from numbers to a factor
step_num2factor(weather, levels=c("clear", "mist", "rain/snow")) %>% #modifying weather from numbers into factors
step_bin2factor(holiday) %>% #modifying holiday to factor from numbers
step_bin2factor(workingday) %>%
step_rm(datetime)#modifying working day to factor from numbers
#updating table to reflect above changes, will be saved with original name "bike"
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=bike)
#creating a model
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bike)
bike_predictions <- predict(bike_workflow,
new_data=bike_test)
bike_predictions[bike_predictions<0] <- 0 #making all negative columns 0
bike_predictions <- rename(bike_predictions, count = .pred)
bike_predictions$datetime <- bike_test$datetime
bike_predictions$datetime <-format(bike_predictions$datetime)
vroom_write(bike_predictions, "bike_predictions.csv", delim=",")
vroom_write(bike_predictions, "bike_predictions.csv", delim=",")
