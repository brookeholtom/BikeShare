boxplot(augustine$High)
cor(augustine)
augustine_lm <- lm(Occupancy*Average ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm)
augustine_lm_avg <- lm(Occupancy*Average ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_avg)
augustine_lm_low <- lm(Occupancy*Low ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_low)
augustine_lm_high <- lm(Occupancy*High ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_avg)
summary(augustine_lm_high)
augustine_lm_avg <- lm(Occupancy*Average + Occupancy*High + Occupancy*Low ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
augustine_lm_all <- lm(Occupancy*Average + Occupancy*High + Occupancy*Low ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_all)
augustine_lm_all <- lm(Occupancy ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_Occupancy)
augustine_lm_Occupancy <- lm(Occupancy ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_Occupancy)
augustine_lm_high <- lm(Occupancy*High ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_high)
augustine_lm_low <- lm(Occupancy*Low ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_low)
augustine_lm_avg <- lm(Occupancy*Average ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_avg)
#Average
augustine_lm_avg_only <- lm(Average ~ Rating + Capacity + Rooms + Beds + Baths + Cameras + ProfessionalPhotography +WellDecorated + PetFriendly + Cameras + FreeParking + Workspace + Pool + HotTub + PatioFurniture + OutdoorActivities + Firepit + Grill + DirectBeachAccess +TimetoBeach +ClosetoStoreRating , data=augustine)
summary(augustine_lm_avg_only)
##Regression Tree Attempt##
my_mod_tree_augustine <- decision_tree(tree_depth = tune(),
cost_complexity = tune(),
min_n=tune()) %>% #Type of model
set_engine("rpart") %>% # Engine = What R function to use
set_mode("regression")
## Create a workflow with model & recipe
preg_wf_tree_augustine <- workflow() %>%
add_recipe(my_recipe_augustine) %>%
add_model(my_mod_tree_augustine)
## Set up grid of tuning values
tuning_grid_tree_augustine <- grid_regular(tree_depth(),
cost_complexity(),
min_n(),
levels = 5)
## Set up K-fold CV
folds <- vfold_cv(augustine, v =5, repeats=1)
## Find best tuning parameters
CV_results_tree_augustine <- preg_wf_tree_augustine %>%
tune_grid(resamples=folds,
grid=tuning_grid_tree_augustine,
metrics=metric_set(rmse, mae, rsq))
## Find best tuning parameters
CV_results_tree_augustine <- preg_wf_tree_augustine %>%
tune_grid(resamples=folds,
grid=tuning_grid_tree_augustine,
metrics=metric_set(rmse, mae, rsq))
bestTune_augustine <- CV_results_tree_augustine %>%
select_best("rmse")
## Find best tuning parameters
CV_results_tree_augustine <- preg_wf_tree_augustine %>%
tune_grid(resamples=folds,
grid=tuning_grid_tree_augustine,
metrics=metric_set(rmse, mae, rsq))
bestTune_augustine <- CV_results_tree_augustine %>%
select_best("rmse")
final_wf_tree <- preg_wf_tree_augustine %>%
finalize_workflow(bestTune_augustine) %>%
fit(data=augustine)
predictions_tree_augustine <- final_wf_tree %>%
predict(new_data = augustine)
predictions_tree_augustine
plot(predictions_tree_augustine)
augustine_data_frame <- as.data.frame(augustine)
ggplot(data=augustine_data_frame) +
geom_point(mapping= aes(x= Rating, y= (Average*Occupancy))) +
theme(aspect.ratio=1)
ggplot(data=augustine_data_frame) +
geom_point(mapping= aes(x= TimetoBeach, y= Average*Occupancy)) +
theme(aspect.ratio=1)
ggplot(data=augustine_data_frame) +
geom_point(mapping= aes(x= ClosetoStoreRating, y= High*Occupancy)) +
theme(aspect.ratio=1)
avPlots(augustine, terms= ~ Rooms + Baths + ProfessionalPhotography)
avPlots(augustine, Occupancy*Average= ~ Rooms + Baths + ProfessionalPhotography)
avPlots(augustine, Occupancy= ~ Rooms + Baths + ProfessionalPhotography)
avPlots(augustine_lm, Occupancy= ~ Rooms + Baths + ProfessionalPhotography)
avPlots(augustine_lm, Occupancy*Average= ~ Rooms + Baths + ProfessionalPhotography)
avPlots(augustine_lm, Average= ~ Rooms + Baths + ProfessionalPhotography)
#(a) Scatterplot
plot(augustine)
augustine_boxplot <- ggplot(augustine) +
geom_boxplot(mapping = aes( y= residuals)) +
theme(aspect.ratio = 1)
print(augustine_boxplot)
augustine_boxplot <- ggplot(augustine) +
geom_boxplot(mapping = aes( y= residuals)) +
theme(aspect.ratio = 1)
augustine$residuals <-  augustine_lm_avg$residuals
augustine_boxplot <- ggplot(augustine) +
geom_boxplot(mapping = aes( y= augustine_lm_avg$residuals)) +
theme(aspect.ratio = 1)
print(augustine_boxplot)
augustine_boxplot <- ggplot(augustine_lm_avg) +
geom_boxplot(mapping = aes(y=augustine_lm_avg$residuals)) +
theme(aspect.ratio = 1)
print(augustine_boxplot)
augustine_hist <- ggplot(data = augustine_lm_avg) +
geom_histogram(mapping = aes(x = residuals, y = ..density..),
) +
stat_function(fun = dnorm,
color = "red",
size = 2,
args = list(mean = mean(bodyfat$residuals),
sd = sd(bodyfat$residuals))) +
theme(aspect.ratio = 1)
augustine_hist <- ggplot(data = augustine_lm_avg) +
geom_histogram(mapping = aes(x = residuals, y = ..density..),
) +
stat_function(fun = dnorm,
color = "red",
size = 2,
args = list(mean = mean(augustine_lm_avg$residuals),
sd = sd(augustine_lm_avg$residuals))) +
theme(aspect.ratio = 1)
augustine_hist <- ggplot(data = augustine_lm_avg) +
geom_histogram(mapping = aes(x = residuals, y = ..density..),
) +
stat_function(fun = dnorm,
color = "red",
linewidth = 2,
args = list(mean = mean(augustine_lm_avg$residuals),
sd = sd(augustine_lm_avg$residuals))) +
theme(aspect.ratio = 1)
augustine_hist
augustine_hist <- ggplot(data = augustine_lm_avg) +
geom_histogram(mapping = aes(x = augustine_lm_avg$residuals, y = ..density..),
) +
stat_function(fun = dnorm,
color = "red",
linewidth = 2,
args = list(mean = mean(augustine_lm_avg$residuals),
sd = sd(augustine_lm_avg$residuals))) +
theme(aspect.ratio = 1)
augustine_hist
autoplot(augustine_lm_avg, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
autoplot(augustine_lm_avg, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
ggplot2::autoplot(augustine_lm_avg, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
autoplot(augustine, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
autoplot(augustine_lm_avg, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
ggplot(augustine_lm_avg, aes(sample = augustine_lm_avg) +
#(d) Normal Probability Plot
stat_qq() +
labs(title = "Normal Probability Plot")
ggplot(augustine_lm_avg  +
ggplot(augustine_lm_avg, aes(sample = augustine_lm_avg)  +
stat_qq() +
stat_qq_line() +
labs(title = "Normal Probability Plot"))
library(tidyverse)
library(ggfortify)
library(car)
library(corrplot)
library(gridExtra)
autoplot(bodyfat_lm, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
autoplot(augustine_lm_avg, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
# Residuals vs. Fitted Values Plot
resid_fitted_plot <- autoplot(augustine_lm_avg, which = 1, ncol = 1, nrow = 1)
print(resid_fitted_plot)
# Cook's Distance
augustine$cooksd <- cooks.distance(augustine_lm_avg)
ggplot(data = bodyfat) +
geom_point(mapping = aes(x = as.numeric(rownames(bodyfat)),
y = cooksd)) +
ylab("Cook's Distance") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 4 / length(cooksd)),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
# Cook's Distance
augustine_lm_avg$cooksd <- cooks.distance(augustine_lm_avg)
ggplot(data = augustine_lm_avg) +
geom_point(mapping = aes(x = as.numeric(rownames(bodyfat)),
y = cooksd)) +
ylab("Cook's Distance") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 4 / length(cooksd)),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
ggplot(data = augustine_lm_avg) +
geom_point(mapping = aes(x = as.numeric(rownames(augustine_lm_avg)),
y = cooksd)) +
ylab("Cook's Distance") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 4 / length(cooksd)),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
# Cook's Distance
augustine_lm_avg$cooksd <- cooks.distance(augustine_lm_avg)
ggplot(data = augustine_lm_avg) +
geom_point(mapping = aes(x = as.numeric(rownames(augustine_lm_avg)),
y = cooksd)) +
ylab("Cook's Distance") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 4 / length(cooksd)),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
# Cook's Distance
augustine_lm_avg$cooksd <- cooks.distance(augustine_lm_avg)
ggplot(data = augustine_lm_avg) +
geom_point(mapping = aes(x = as.numeric(rownames(augustine_lm_avg)),
y = abs(dffits))) +
ylab("Absolute Value of DFFITS for Y") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 2 * sqrt(length(bodyfat_lm$coefficients) /
length(dffits))),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
# DFFITS
augustine_lm_avg$dffits <- dffits(augustine_lm_avg)
ggplot(data = augustine_lm_avg) +
geom_point(mapping = aes(x = as.numeric(rownames(augustine_lm_avg)),
y = abs(dffits))) +
ylab("Absolute Value of DFFITS for Y") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 2 * sqrt(length(bodyfat_lm$coefficients) /
length(dffits))),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
vif(bodyfat_lm)
vif(augustine_lm_avg)
summary(augustine_lm_avg)
summary(augustine_lm_low)
summary(augustine_lm_high)
summary(augustine_lm_Occupancy)
summary(augustine_lm_avg_only)
#Best Model from this Data:
augustine_lm_avg <- lm(Occupancy*Average ~ Rooms + Baths + ProfessionalPhotography + FreeParking, data=augustine)
summary(augustine_lm_best)
#Best Model from this Data:
augustine_lm_best <- lm(Occupancy*Average ~ Rooms + Baths + ProfessionalPhotography + FreeParking, data=augustine)
summary(augustine_lm_best)
predictions_tree_augustine
collect_metrics(CV_results_tree_augustine) %>%
filter(.metric=="rmse") %>%
ggplot(data=., aes(x=penalty, y=mean, color=factor(mixture))) +
geom_line()
collect_metrics(CV_results_tree_augustine) %>%
filter(.metric=="rmse") %>%
ggplot(data=., aes(x=penalty, y=mean, color=factor(mixture))) +
geom_line()
avPlots(augustine_lm_avg, Average= ~ Rooms + Baths + ProfessionalPhotography)
autoplot(augustine_lm_avg, which = 2, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
collect_metrics(CV_results_tree_augustine) %>%
filter(.metric=="rmse") #%>%
rsq(predictions_tree_augustine)
rsq(truth = augustine$Occupancy, estimate = predictions_tree_augustine)
collect_metrics(CV_results_tree_augustine) %>%
filter(.metric=="rmse") #%>%
final_wf_tree
my_recipe_augustine <- recipe(Occupancy*Average ~ ., data=augustine)
my_recipe_augustine <- recipe(Average ~ ., data=augustine)
prepped_recipe_augustine <- prep(my_recipe_augustine)
bake(prepped_recipe_augustine, new_data=augustine)
my_mod_tree_augustine <- decision_tree(tree_depth = tune(),
cost_complexity = tune(),
min_n=tune()) %>% #Type of model
set_engine("rpart") %>% # Engine = What R function to use
set_mode("regression")
## Create a workflow with model & recipe
preg_wf_tree_augustine <- workflow() %>%
add_recipe(my_recipe_augustine) %>%
add_model(my_mod_tree_augustine)
## Set up grid of tuning values
tuning_grid_tree_augustine <- grid_regular(tree_depth(),
cost_complexity(),
min_n(),
levels = 5)
## Set up K-fold CV
folds <- vfold_cv(augustine, v =5, repeats=1)
## Find best tuning parameters
CV_results_tree_augustine <- preg_wf_tree_augustine %>%
tune_grid(resamples=folds,
grid=tuning_grid_tree_augustine,
metrics=metric_set(rmse, mae, rsq))
bestTune_augustine <- CV_results_tree_augustine %>%
select_best("rmse")
final_wf_tree <- preg_wf_tree_augustine %>%
finalize_workflow(bestTune_augustine) %>%
fit(data=augustine)
predictions_tree_augustine <- final_wf_tree %>%
predict(new_data = augustine)
predictions_tree_augustine
collect_metrics(CV_results_tree_augustine) %>%
filter(.metric=="rmse") #%>%
final_wf_tree
augustine_tree <- augustine %>%
mutate(OccAvg = Occupancy * Average) %>%
select(-High, -Low)
my_recipe_augustine <- recipe(OccAvg ~ ., data=augustine)
augustine_tree <- augustine %>%
mutate(OccAvg = Occupancy * Average) %>%
select(-High, -Low)
my_recipe_augustine <- recipe(OccAvg ~ ., data=augustine)
augustine_tree
my_recipe_augustine <- recipe(OccAvg ~ ., data=augustine_tree)
prepped_recipe_augustine <- prep(my_recipe_augustine)
bake(prepped_recipe_augustine, new_data=augustine_tree)
my_mod_tree_augustine <- decision_tree(tree_depth = tune(),
cost_complexity = tune(),
min_n=tune()) %>% #Type of model
set_engine("rpart") %>% # Engine = What R function to use
set_mode("regression")
## Create a workflow with model & recipe
preg_wf_tree_augustine <- workflow() %>%
add_recipe(my_recipe_augustine) %>%
add_model(my_mod_tree_augustine)
## Set up grid of tuning values
tuning_grid_tree_augustine <- grid_regular(tree_depth(),
cost_complexity(),
min_n(),
levels = 5)
## Set up K-fold CV
folds <- vfold_cv(augustine_tree, v =5, repeats=1)
## Find best tuning parameters
CV_results_tree_augustine <- preg_wf_tree_augustine %>%
tune_grid(resamples=folds,
grid=tuning_grid_tree_augustine,
metrics=metric_set(rmse, mae, rsq))
bestTune_augustine <- CV_results_tree_augustine %>%
select_best("rmse")
final_wf_tree <- preg_wf_tree_augustine %>%
finalize_workflow(bestTune_augustine) %>%
fit(data=augustine_tree)
predictions_tree_augustine <- final_wf_tree %>%
predict(new_data = augustine_tree)
predictions_tree_augustine
collect_metrics(CV_results_tree_augustine) %>%
filter(.metric=="rmse") #%>%
final_wf_tree
augustine_tree <- augustine %>%
mutate(OccAvg = Occupancy * Average) %>%
select(-High, -Low, -Occupancy, -Average)
augustine_tree
my_recipe_augustine <- recipe(OccAvg ~ ., data=augustine_tree)
prepped_recipe_augustine <- prep(my_recipe_augustine)
bake(prepped_recipe_augustine, new_data=augustine_tree)
my_mod_tree_augustine <- decision_tree(tree_depth = tune(),
cost_complexity = tune(),
min_n=tune()) %>% #Type of model
set_engine("rpart") %>% # Engine = What R function to use
set_mode("regression")
## Create a workflow with model & recipe
preg_wf_tree_augustine <- workflow() %>%
add_recipe(my_recipe_augustine) %>%
add_model(my_mod_tree_augustine)
## Set up grid of tuning values
tuning_grid_tree_augustine <- grid_regular(tree_depth(),
cost_complexity(),
min_n(),
levels = 5)
## Set up K-fold CV
folds <- vfold_cv(augustine_tree, v =5, repeats=1)
## Find best tuning parameters
CV_results_tree_augustine <- preg_wf_tree_augustine %>%
tune_grid(resamples=folds,
grid=tuning_grid_tree_augustine,
metrics=metric_set(rmse, mae, rsq))
bestTune_augustine <- CV_results_tree_augustine %>%
select_best("rmse")
final_wf_tree <- preg_wf_tree_augustine %>%
finalize_workflow(bestTune_augustine) %>%
fit(data=augustine_tree)
predictions_tree_augustine <- final_wf_tree %>%
predict(new_data = augustine_tree)
predictions_tree_augustine
collect_metrics(CV_results_tree_augustine) %>%
filter(.metric=="rmse") #%>%
final_wf_tree
RMSE = sqrt(nanmean((OccAvg_predicted-OccAvg).^2))
1 - mse / Var(OccAvg)
mse(predictions_tree_augustine)
performance_mse(predictions_tree_augustine)
summary(final_wf_tree)
final_wf_tree
performance::performance_mse(predictions_tree_augustine)
library(performance)
performance::mse(predictions_tree_augustine)
performance::mse(final_wf_tree)
CV_results_tree_augustine
bestTune_augustine
predictions_tree_augustine
(predictions_tree_augustine - augustine_tree)
predictions_tree_augustine
augustine_tree
(predictions_tree_augustine - augustine_tree$OccAvg)
(predictions_tree_augustine - augustine_tree$OccAvg)
(predictions_tree_augustine - augustine_tree$OccAvg)^2/75
sum(predictions_tree_augustine - augustine_tree$OccAvg)
sum(predictions_tree_augustine - augustine_tree$OccAvg)^2
sum((predictions_tree_augustine - augustine_tree$OccAvg)^2)
sum((predictions_tree_augustine - augustine_tree$OccAvg)^2)/75
LR_R = RSQUARE(augustine_tree$OccAvg,predictions_tree_augustine)
RSQUARE = function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
LR_R = RSQUARE(augustine_tree$OccAvg,predictions_tree_augustine)
LR_R
RSqaured_Augustine
RSQUARE = function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
RSquared_Augustine = RSQUARE(augustine_tree$OccAvg,predictions_tree_augustine)
RSquared_Augustine
#Packages
library(tidyverse)
library(tidymodels)
library(vroom)
library(poissonreg)
library(rpart)
library(ranger)
#Importing Data In
bike <- vroom("train.csv") #importing the data via vroom
setwd("C:/Users/brook/Downloads")
setwd("C:/Users/brook/Downloads/Stat348/BikeShare")
#Importing Data In
bike <- vroom("train.csv") #importing the data via vroom
bike_test <-  vroom("test.csv") #importing test data
#Cleaning Data
bike <- bike %>%
mutate(weather = ifelse(weather >= 4, 3, weather)) %>%
select(-casual, -registered)
bike_test <- bike_test %>%
mutate(weather = ifelse(weather >= 4, 3, weather))
#Recipe, Prep, and Bake
my_recipe <- recipe(count ~ ., data=bike) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>% #modifying season column from numbers to a factor
step_num2factor(weather, levels=c("clear", "mist", "rain/snow")) %>% #modifying weather from numbers into factors
step_bin2factor(holiday) %>% #modifying holiday to factor from numbers
step_bin2factor(workingday) %>% #modifying working day to factor from numbers
step_rm(datetime)
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data=bike)
baked_recipe <- bake(my_recipe, new_data = bike_test)
my_recipe_2 <- recipe(count~., data = bike) %>%
step_num2factor(season, levels = c("Spring", "Summer", "Fall", "Winter")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(weather, levels = c("Clear", "Mist", "Rain")) %>%
step_time(datetime, features = "hour") %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
logTrainSet <- bike %>%
mutate(count=log(count))
###Stacked Models###
library(stacks)
prepped_recipe_stacked <- prep(my_recipe_2)
bake(prepped_recipe_stacked, new_data=bike)
bake(prepped_recipe_stacked, new_data=bike_test)
folds <- vfold_cv(logTrainSet, v=10, repeats=1)
untunedmodel <- control_stack_grid()
tunedmodel <-  control_stack_resamples()
lin_model_stacked <- linear_reg() %>%
set_engine("lm")
linregwf_stacked <-  workflow () %>%
add_recipe(my_recipe) %>%
add_model(lin_model_stacked)
lin_reg_model_stacked <- fit_resamples(linregwf_stacked,
resamples = folds,
metrics = metric_set(rmse, mae, rsq),
control=tunedmodel)
preg_model_stacked <- linear_reg(penalty=tune(),
mixture=tune()) %>%
set_engine("glmnet")
preg_wf_stacked <-workflow() %>%
add_recipe(my_recipe_2) %>%
add_model(preg_model_stacked)
preg_tuning_grid_stacked <- grid_regular(penalty(),
mixture(),
levels= 10)
preg_models_stacked <- preg_wf_stacked %>%
tune_grid(resamples=folds,
grid=preg_tuning_grid_stacked,
metrics=metric_set(rmse, mae, rsq),
control=untunedmodel)
random_forest_stacked <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_engine("ranger") %>%
set_mode("regression")
random_forest_wf_stacked <- workflow() %>%
add_recipe(my_recipe_2) %>%
add_model(random_forest_stacked)
tuning_grid_random_forest <- grid_regular(mtry(range = c(1, 10)),
min_n(),
levels = (5))
random_forest_stacked <- random_forest_wf_stacked %>%
tune_grid(resamples = folds,
grid = tuning_grid_random_forest,
metrics = metric_set(rmse),
control=untunedmodel)
